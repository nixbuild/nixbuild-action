name: nixbuild-ci

on:
  workflow_call:
    secrets:
      nixbuild_ssh_key:
        required: true
        description: |
          The private ssh key used to authenticate with nixbuild.net

          You should not add your private key directly to the workflow file but
          instead define a GitHub Secret for it, to avoid mistakenly sharing
          your key with others.

          It is advisable to create a new nixbuild.net ssh key specifically for
          use within GitHub (or even per repository or workflow). That way you
          can revoke access to your nixbuild.net account in a fine-grained
          fashion.

    outputs:
      success:
        value: ${{ jobs.collect-results.outputs.results }}
        description: |
          Outputs the string 'true' if all builds succeeded, otherwise 'false'.
          You need to set `ignore_build_failures` to `true` in order to get the
          'false' result, otherwise your workflow will be terminated before
          you can use this output.

      results:
        value: ${{ jobs.collect-results.outputs.results }}
        description: |
          Contains a JSON object that maps each build to its result. Look at the
          file `examples/using-the-ci-workflow/expected-result.json` to see an
          example.

    inputs:
      ignore_build_failures:
        type: boolean
        required: false
        default: false
        description: |
          If true, the workflow will not fail even if one or more builds fail.
          This is useful if you want to process the build results in a
          subsequent job. For an example of this, see the workflow in
          `.github/workflows/ci-example.yml`.

      fail_fast:
        type: boolean
        required: false
        default: false
        description: |
          If true, any remaining builds will be cancelled when the first build
          failure is found. If false, all builds will be attempted no matter how
          many builds fail. Note, `ignore_build_failures` must be false for this
          option have any effect. If `ignore_build_failures` is true, no builds
          will be cancelled.

      filter_builds:
        type: string
        required: false
        default: '.top_attr == "checks"'
        description: |
          A `jq` boolean expression that decides which builds from `flake.nix`
          to build. See the `jq` documentation for info on how to write boolean
          expressions: https://stedolan.github.io/jq/manual/.

          When evaluating the expression, the following fields will be
          available:

          .top_attr : Either "checks" or "packages"
          .system   : The build's system ("x86_64-linux", "aarch64-linux" etc)
          .attr     : The build's attribute name, as defined in your flake
          .name     : The build's derivation name

      label_builds:
        type: string
        required: false
        default: '"\(.attr) [\(.system)]"'
        description: |
          A `jq` string expression that defines the label of the build. The
          label is visible in the GitHub Actions UI.
          See the `jq` documentation for info on how to write string
          expressions: https://stedolan.github.io/jq/manual/.

          When evaluating the expression, the following fields will be
          available:

          .top_attr : Either "checks" or "packages"
          .system   : The build's system ("x86_64-linux", "aarch64-linux" etc)
          .attr     : The build's attribute name, as defined in your flake
          .name     : The build's derivation name

      flake_directory:
        type: string
        required: false
        default: '.'
        description: |
          The path to the directory in your repository that contains the
          `flake.nix` file you want the workflow to build.

      use_remote_store_building:
        type: boolean
        required: false
        default: true
        description: |
          Use remote store building to achieve optimal performance. When
          working with Nix code which uses import-from-derivation, you might
          need to turn this off to avoid errors.

      pre_evaluation_script:
        type: string
        required: false
        default: ''
        description: |
          Bash script that should be executed before evaluating the flake.

      pre_build_script:
        type: string
        required: false
        default: ''
        description: |
          Bash script that should be executed before running each build. Note,
          every build runs as a separate job so this script (and all builds)
          will be executed in parallel.

      cache-build-failures:
        type: boolean
        default: true
        required: false
        description: |
          Set the cache-build-failures setting in nixbuild.net. For
          documentation see
          https://docs.nixbuild.net/settings/#cache-build-failures.

      cache-build-timeouts:
        type: boolean
        default: false
        required: false
        description: |
          Set the cache-build-timeouts setting in nixbuild.net. For
          documentation see
          https://docs.nixbuild.net/settings/#cache-build-timeouts.


jobs:

  eval-flake:
    name: "evaluate flake"
    runs-on: ubuntu-latest
    outputs:
      builds: ${{ steps.find-builds.outputs.builds }}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v15
        with:
          nix_on_tmpfs: true
          nix_conf: experimental-features = nix-command flakes
      - name: Pre-evaluation script
        run: ${{inputs.pre_evaluation_script}}
      - name: Find builds
        id: find-builds
        run: |
          set -eo pipefail
          flake_json="$(mktemp)"
          builds="$(mktemp)"
          nix flake show "./${{inputs.flake_directory}}" --json > "$flake_json"
          jq < "$flake_json" -rc '{checks: (.checks // {}), packages: (.packages // {})}|to_entries|map(.key as $top_attr | .value|to_entries|map(.key as $sys | .value|to_entries|map(.key as $attr | {name: "", description: "", top_attr: $top_attr, system: $sys, attr: $attr} + .value)))|flatten|map(select(${{inputs.filter_builds}}))|map(. as $x | (${{inputs.label_builds}}) as $l | $x + {label: $l})|"::set-output name=builds::\(.)"'

  build:
    name: ${{matrix.build.label}}
    needs: eval-flake
    runs-on: ubuntu-latest
    strategy:
      fail-fast: ${{ inputs.fail_fast }}
      matrix:
        build: ${{fromJSON(needs.eval-flake.outputs.builds)}}
    steps:
      - uses: actions/checkout@v3
      - uses: nixbuild/nix-quick-install-action@v15
        with:
          nix_on_tmpfs: true
          nix_conf: experimental-features = nix-command flakes
      - uses: nixbuild/nixbuild-action@v11
        with:
          nixbuild_ssh_key: ${{secrets.nixbuild_ssh_key}}
          cache-build-failures: ${{inputs.cache-build-failures}}
          cache-build-timeouts: ${{inputs.cache-build-timeouts}}

      - name: Pre-build script
        run: ${{inputs.pre_build_script}}

      - name: "Build ${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}"
        id: build
        run: |
          touch build.json
          nix build "./${{inputs.flake_directory}}#${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" \
            --print-build-logs \
            --eval-store auto \
            --store ${{ inputs.use_remote_store_building && 'ssh-ng://eu.nixbuild.net' || 'auto' }} \
            --json > build.json \
            2> >(tee -a build.log >&2) || true

          status=0
          if ! [ -s build.json ]; then
            echo '[{"success":false}]' > build.json
            if [ "${{ inputs.ignore_build_failures }}" == "true" ]; then
              echo "::error title=${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}::Build failed"
            else
              status=1
            fi
          fi

          jq -c '{success: true, name: "${{matrix.build.name}}", description: "${{matrix.build.description}}", label: "${{matrix.build.label}}"} + .[0] | {"${{matrix.build.top_attr}}": {"${{matrix.build.system}}": {"${{matrix.build.attr}}": .}}}' build.json > result.json

          # Generate a valid artifact name
          ARTIFACT_NAME="$(echo "${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" | tr '":<>|*?\\/' '_')"
          echo "ARTIFACT_NAME=$ARTIFACT_NAME" >> "$GITHUB_ENV"

          exit "$status"

      - name: Upload result
        if: always()
        uses: actions/upload-artifact@v3
        with:
          name: "${{ env.ARTIFACT_NAME }}"
          path: |
            result.json
            build.log


  collect-results:
    name: "collect results"
    needs: build
    runs-on: ubuntu-latest
    outputs:
      success: ${{ steps.merge.outputs.success }}
      results: ${{ steps.merge.outputs.results }}
    steps:
      - id: download
        uses: actions/download-artifact@v3
        with:
          path: ~/results
      - id: merge
        run: |
          jq -rcs 'reduce .[] as $x ({}; . * $x)|"::set-output name=results::\(.)"' \
            "${{steps.download.outputs.download-path}}"/*/result.json
          if jq -s '..|.success?|select(if . == false then ""|halt_error(1) else false end)' "${{steps.download.outputs.download-path}}"/*/result.json; then
            echo "::set-output name=success::true"
          else
            echo "::set-output name=success::false"
          fi
