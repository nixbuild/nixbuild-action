name: nixbuild-ci

on:
  workflow_call:
    secrets:
      nixbuild_token:
        required: true
        description: |
          The private auth token used to access nixbuild.net.

          You should not add your private token directly to the workflow file but
          instead define a GitHub Secret for it, to avoid mistakenly sharing your
          token with others.

          Follow the instructions in the README of this action for instructions
          on how to create and configure your auth token.

          The token must have the permissions 'build:read', 'build:write',
          'store:read' and 'store:write'.

          See https://docs.nixbuild.net/access-control/ for more details on auth
          tokens and permissions.

      github_access_token:
        required: false
        description: |
          Defines the access token Nix should use when fetching from GitHub.

    outputs:
      success:
        value: ${{ jobs.summary.outputs.success }}
        description: |
          Outputs the string 'true' if all builds succeeded, otherwise 'false'.
          You need to set `ignore_build_failures` to `true` in order to get the
          'false' result, otherwise your workflow will be terminated before
          you can use this output.

      results:
        value: ${{ jobs.summary.outputs.results }}
        description: |
          Contains a JSON object that maps each build to its result. Look at the
          file `examples/using-the-ci-workflow/expected-result.json` to see an
          example.

    inputs:
      skip_nix_install:
        type: boolean
        required: false
        default: false
        description: |
          If set to true, don't install Nix. This only makes sense if you use
          a runner that already has Nix installed (most likely a self-hosted
          runner).

      nix_version:
        type: string
        default: '2.29.1'
        required: false
        description: |
          The version of Nix that should be used.
          See available versions at
          https://github.com/nixbuild/nix-quick-install-action/releases/tag/v33.

      nix_conf:
        type: string
        default: ''
        required: false
        description: |
          Nix configuration passed to `nix-quick-install-action`.

      nix_args:
        type: string
        default: ''
        required: false
        description: |
          Nix command line arguments passed on to `nix flake show` and
          `nix build`. The string provided here will be split on every space
          and newline, and the resulting parts will be passed as individual
          arguments.

      oidc:
        type: boolean
        required: false
        default: false
        description: |
          If enabled, nixbuild-action will automatically fetch an OIDC ID
          Token from GitHub and pass it on to nixbuild.net so that OIDC claims
          can be used when authoring Biscuit policies. If this setting is
          enabled, you must make sure your job has the 'id-token: write'
          permission enabled.

      ignore_build_failures:
        type: boolean
        required: false
        default: false
        description: |
          If true, the workflow will not fail even if one or more builds fail.
          This is useful if you want to process the build results in a
          subsequent job. For an example of this, see the workflow in
          `.github/workflows/ci-example.yml`.

      fail_fast:
        type: boolean
        required: false
        default: false
        description: |
          If true, any remaining builds will be cancelled when the first build
          failure is found. If false, all builds will be attempted no matter how
          many builds fail. Note, `ignore_build_failures` must be false for this
          option have any effect. If `ignore_build_failures` is true, no builds
          will be cancelled.

      runs_on:
        type: string
        default: 'ubuntu-24.04'
        required: false
        description: |
          The GitHub Actions runner to use.

      filter_builds:
        type: string
        required: false
        default: '.top_attr == "checks"'
        description: |
          A `jq` boolean expression that decides which builds from `flake.nix`
          to build. See the `jq` documentation for info on how to write boolean
          expressions: https://stedolan.github.io/jq/manual/.

          When evaluating the expression, the following fields will be
          available:

          .top_attr : Either "checks" or "packages"
          .system   : The build's system ("x86_64-linux", "aarch64-linux" etc)
          .attr     : The build's attribute name, as defined in your flake
          .name     : The build's derivation name

      label_builds:
        type: string
        required: false
        default: '"\(.attr) [\(.system)]"'
        description: |
          A `jq` string expression that defines the label of the build. The
          label is visible in the GitHub Actions UI.
          See the `jq` documentation for info on how to write string
          expressions: https://stedolan.github.io/jq/manual/.

          When evaluating the expression, the following fields will be
          available:

          .top_attr : Either "checks" or "packages"
          .system   : The build's system ("x86_64-linux", "aarch64-linux" etc)
          .attr     : The build's attribute name, as defined in your flake
          .name     : The build's derivation name

      flake:
        type: string
        required: false
        default: '.'
        description: |
          The flake that should be evaluated and built. By default this is `.`,
          which means the flake located in your repository root. But you can
          change this if your `flake.nix` is somewhere else in your repository,
          or if you want to evaluate a flake from some other repository.
          If you want to evaluate a flake in some subdirectory of your
          repository you must prefix that directory with `./`.

      pre_evaluation_script:
        type: string
        required: false
        default: ''
        description: |
          Bash script that should be executed before evaluating the flake.

      pre_build_script:
        type: string
        required: false
        default: ''
        description: |
          Bash script that should be executed before running each build. Note,
          every build runs as a separate job so this script (and all builds)
          will be executed in parallel.

      generate_build_summary:
        type: boolean
        default: true
        description: |
          Generate a summary of all builds that has been running during the
          workflow. If you are using ci-workflow.yml multiple times in your
          workflow, it can make sense to disable this summary since otherwise
          you will get the same summary generated multiple times. In such cases,
          you can add an explicit summary job that runs after all other workflow
          jobs and uses nixbuild-action to generate the summary only one time.

      settings:
        type: string
        default: ''
        required: false
        description: |
          Set the `settings` input for nixbuild-action

      tags:
        type: string
        default: ''
        required: false
        description: |
          Set the `tags` input for nixbuild-action

      lfs:
        type: boolean
        default: false
        required: false
        description: |
          Use git-lfs when checking out the repository for the build job.
          See: https://github.com/actions/checkout

      nix_on_tmpfs:
        type: boolean
        default: false
        required: false
        description: |
          On the GitHub runner, put /nix on tmpfs to speed up evaluation. This
          is usually fine to do, since only files used for evaluation will be
          stored in the local Nix store. However, if you have many large
          sources you might run out of disk space during evaluation.

      artifact_prefix:
        type: string
        default: ''
        required: false
        description: |
          The CI workflow stores two build artifacts, one for build logs and
          one for JSON representations of the build results. To be able to
          reuse the CI workflow multiple times inside the same workflow, a
          unique artifact prefix is generated. If you want to set the prefix
          yourself you can do it with this setting. Remember that you can't
          use the same prefix for multiple invocations of the CI workflow
          within the same workflow.

jobs:

  eval-flake:
    name: "Evaluate flake"
    runs-on: ${{inputs.runs_on}}
    outputs:
      builds: ${{ steps.find-builds.outputs.builds }}
    steps:
      - uses: actions/checkout@v4
      - if: ${{ ! inputs.skip_nix_install }}
        uses: nixbuild/nix-quick-install-action@v33
        with:
          github_access_token: ${{secrets.github_access_token}}
          nix_on_tmpfs: ${{inputs.nix_on_tmpfs}}
          nix_conf: |
            experimental-features = nix-command flakes
            ${{inputs.nix_conf}}
          nix_version: ${{inputs.nix_version}}
      - name: Pre-evaluation script
        run: ${{inputs.pre_evaluation_script}}
      - name: Find builds
        id: find-builds
        run: |
          set -eo pipefail
          flake_json="$(mktemp)"
          nix_args=()

          # For Nix >= 2.14 we need --all-systems
          if [[ "${{inputs.nix_version}}" =~ 2\.1[456789].* ]]; then
            nix_args+=("--all-systems")
          elif [[ "${{inputs.nix_version}}" =~ 2\.2.* ]]; then
            nix_args+=("--all-systems")
          fi

          if [ -n "${{inputs.nix_args}}" ]; then
            IFS='\n'
            while read l; do
              readarray -d ' ' -O "${#nix_args[@]}" -t nix_args < <(echo -n "$l")
            done < <(echo "${{inputs.nix_args}}")
          fi
          nix flake show "${{inputs.flake}}" "${nix_args[@]}" --json > "$flake_json"
          jq < "$flake_json" -rc '{checks: (.checks // {}), packages: (.packages // {})}|to_entries|map(.key as $top_attr | .value|to_entries|map(.key as $sys | .value|to_entries|map(.key as $attr | {name: "", description: "", top_attr: $top_attr, system: $sys, attr: $attr} + .value)))|flatten|map(select(${{inputs.filter_builds}}))|map(. as $x | (${{inputs.label_builds}}) as $l | $x + {label: $l})|"builds=\(.)"' >> "$GITHUB_OUTPUT"

  build:
    name: ${{matrix.build.label}}
    needs: eval-flake
    runs-on: ${{inputs.runs_on}}
    strategy:
      fail-fast: ${{ inputs.fail_fast }}
      matrix:
        build: ${{fromJSON(needs.eval-flake.outputs.builds)}}
    steps:
      - uses: actions/checkout@v4
        with:
          lfs: ${{ inputs.lfs }}
      - if: ${{ ! inputs.skip_nix_install }}
        uses: nixbuild/nix-quick-install-action@v33
        with:
          github_access_token: ${{secrets.github_access_token}}
          nix_on_tmpfs: ${{inputs.nix_on_tmpfs}}
          nix_conf: |
            experimental-features = nix-command flakes
            ${{inputs.nix_conf}}
          nix_version: ${{inputs.nix_version}}
      - uses: nixbuild/nixbuild-action@v23
        with:
          nixbuild_token: ${{secrets.nixbuild_token}}
          oidc: ${{inputs.oidc}}
          settings: ${{inputs.settings}}
          tags: ${{inputs.tags}}

      - name: Pre-build script
        run: ${{inputs.pre_build_script}}

      - name: "Build ${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}"
        id: build
        run: |
          ARTIFACT_PREFIX="$(echo "${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" | tr '":<>|*?\\/' '_')-$RANDOM$RANDOM"
          echo "ARTIFACT_PREFIX=$ARTIFACT_PREFIX" >> "$GITHUB_ENV"

          RESULTS="build.json"
          LOGS="$ARTIFACT_PREFIX.log"

          nix_args=()
          if [ -n "${{inputs.nix_args}}" ]; then
            IFS='\n'
            while read l; do
              readarray -d ' ' -O "${#nix_args[@]}" -t nix_args < <(echo -n "$l")
            done < <(echo "${{inputs.nix_args}}")
          fi

          touch "$RESULTS"
          nix build "${{inputs.flake}}#${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}" \
            --print-build-logs \
            --eval-store auto \
            --store ssh-ng://eu.nixbuild.net \
            --builders "" --max-jobs 2 \
            --json "${nix_args[@]}" > "$RESULTS" \
            2> >(tee -a "$LOGS" >&2) || true

          status=0
          if ! [ -s "$RESULTS" ]; then
            echo '[{"success":false}]' > "$RESULTS"
            if [ "${{ inputs.ignore_build_failures }}" == "true" ]; then
              echo "::error title=${{matrix.build.top_attr}}.${{matrix.build.system}}.${{matrix.build.attr}}::Build failed"
            else
              status=1
            fi
          fi

          jq -c '{success: true, name: "${{matrix.build.name}}", description: "${{matrix.build.description}}", label: "${{matrix.build.label}}"} + .[0] | {"${{matrix.build.top_attr}}": {"${{matrix.build.system}}": {"${{matrix.build.attr}}": .}}}' "$RESULTS" > "$ARTIFACT_PREFIX.json"

          exit "$status"

      - name: Upload result
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: |
            build-result-${{ env.ARTIFACT_PREFIX }}
          path: |
            ${{ env.ARTIFACT_PREFIX }}.json

      - name: Upload logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: |
            build-log-${{ env.ARTIFACT_PREFIX }}
          path: |
            ${{ env.ARTIFACT_PREFIX }}.log


  summary:
    name: "Summary"
    needs: build
    runs-on: ${{inputs.runs_on}}
    outputs:
      success: ${{ steps.merge.outputs.success }}
      results: ${{ steps.merge.outputs.results }}
    steps:
      - id: generate-artifact-prefix
        run: |
          if [ -z "${{ inputs.artifact_prefix }}" ]; then
            ARTIFACT_PREFIX="$RANDOM$RANDOM"
          else
            ARTIFACT_PREFIX="${{ inputs.artifact_prefix }}"
          fi
          echo "ARTIFACT_PREFIX=$ARTIFACT_PREFIX" >> "$GITHUB_ENV"
      - id: merge-results
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}-build-results
          pattern: build-result-*
          delete-merged: true
      - id: merge-logs
        uses: actions/upload-artifact/merge@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}-build-logs
          pattern: build-log-*
          delete-merged: true
      - id: download
        uses: actions/download-artifact@v4
        with:
          name: ${{ env.ARTIFACT_PREFIX }}-build-results
          path: ~/results
      - id: merge
        run: |
          jq -rcs 'reduce .[] as $x ({}; . * $x)|"results=\(.)"' \
            "${{steps.download.outputs.download-path}}"/*.json \
            >> "$GITHUB_OUTPUT"
          if jq -s '..|.success?|select(if . == false then ""|halt_error(1) else false end)' "${{steps.download.outputs.download-path}}"/*.json; then
            echo "success=true" >> "$GITHUB_OUTPUT"
          else
            echo "success=false" >> "$GITHUB_OUTPUT"
          fi
      - name: Generate nixbuild.net summary
        if: ${{ always() && inputs.generate_build_summary }}
        uses: nixbuild/nixbuild-action@v23
        with:
          nixbuild_token: ${{secrets.nixbuild_token}}
          oidc: ${{inputs.oidc}}
          generate_summary_for: 'workflow'
